import React, { useState } from 'react';
import { Type, Globe, Languages } from 'lucide-react';

const SubtitleInput = ({ 
  subtitle, 
  onSubtitleChange, 
  subtitleType, 
  onSubtitleTypeChange, 
  isDarkMode, 
  language 
}) => {
  // Áî®‰∫éÂèåËØ≠Ê®°ÂºèÁöÑ‰∏§‰∏™Áã¨Á´ãÂ≠óÂπïÂÜÖÂÆπ
  const [topSubtitle, setTopSubtitle] = useState('');
  const [bottomSubtitle, setBottomSubtitle] = useState('');

  // ËØ≠Ë®ÄÈÖçÁΩÆ
  const languages = {
    en: {
      subtitleMode: 'Subtitle Mode',
      monoMode: 'Mono Mode',
      bilingualMode: 'Bilingual Mode',

      topSubtitle: 'Top Subtitle',
      bottomSubtitle: 'Bottom Subtitle',
      subtitleContent: 'Subtitle Content',
      lineNote: '(keep each line short)',
      linesSuffix: 'lines',
      usageTips: 'Usage Tips',
      tips: [
        'üé¨ First line displays at bottom of original image',
        'üì∫ Multiple lines auto-splice (TV screenshot effect)', 
        'üé® Adjust font, size, color in style settings',
        'üéØ Best effect with max 20 characters per line',
        'üí´ Subtitles have shadow and stroke effects'
      ]
    },
    zh: {
      subtitleMode: 'Â≠óÂπïÊ®°Âºè',
      monoMode: 'ÂçïËØ≠Ê®°Âºè',
      bilingualMode: 'ÂèåËØ≠Ê®°Âºè', 

      topSubtitle: '‰∏äÊñπÂ≠óÂπï',
      bottomSubtitle: '‰∏ãÊñπÂ≠óÂπï',
      subtitleContent: 'Âè∞ËØçÂÜÖÂÆπ',
      lineNote: 'Ôºà‰∏ÄÊéí‰∏çË¶ÅÂ§™Èïø‰∫ÜÔºâ',
      linesSuffix: 'Ë°å',
      usageTips: '‰ΩøÁî®ÊäÄÂ∑ß',
      tips: [
        'üé¨ Á¨¨‰∏ÄË°åÂè∞ËØçÊòæÁ§∫Âú®ÂéüÂõæÂ∫ïÈÉ®',
        'üì∫ ÊØè‰∏ÄË°åÈÉΩ‰ºöËá™Âä®ÊãºÊé•ÔºàÊ®°ÊãüÁîµËßÜÊà™ÂõæÊïàÊûúÔºâ',
        'üé® ÂèØÂú®Ê†∑ÂºèËÆæÁΩÆ‰∏≠Ë∞ÉÊï¥Â≠ó‰Ωì„ÄÅÂ§ßÂ∞è„ÄÅÈ¢úËâ≤',
        'üéØ ÊØèË°å‰∏çË∂ÖËøá20‰∏™Â≠óÁ¨¶ÊïàÊûúÊúÄ‰Ω≥',
        'üí´ Â≠óÂπïÂ∏¶ÊúâÈò¥ÂΩ±ÂíåÊèèËæπÊïàÊûú'
      ]
    },
    ja: {
      subtitleMode: 'Â≠óÂπï„É¢„Éº„Éâ',
      monoMode: 'Âçò‰∏ÄË®ÄË™û„É¢„Éº„Éâ',
      bilingualMode: '‰∫åË®ÄË™û„É¢„Éº„Éâ',

      topSubtitle: '‰∏äÈÉ®Â≠óÂπï',
      bottomSubtitle: '‰∏ãÈÉ®Â≠óÂπï',
      subtitleContent: 'Â≠óÂπïÂÜÖÂÆπ',
      lineNote: 'Ôºà1Ë°å„ÇíÈï∑„Åè„Åó„Åô„Åé„Å™„ÅÑ„Åß„Åè„Å†„Åï„ÅÑÔºâ',
      linesSuffix: 'Ë°å',
      usageTips: '‰ΩøÁî®„ÅÆ„Ç≥„ÉÑ',
      tips: [
        'üé¨ ÊúÄÂàù„ÅÆË°å„ÅØÂÖÉÁîªÂÉè„ÅÆ‰∏ãÈÉ®„Å´Ë°®Á§∫',
        'üì∫ ÂêÑË°å„ÅåËá™ÂãïÁöÑ„Å´ÁµêÂêàÔºà„ÉÜ„É¨„Éì„Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„ÉàÂäπÊûúÔºâ',
        'üé® „Çπ„Çø„Ç§„É´Ë®≠ÂÆö„Åß„Éï„Ç©„É≥„Éà„ÄÅ„Çµ„Ç§„Ç∫„ÄÅËâ≤„ÇíË™øÊï¥ÂèØËÉΩ',
        'üéØ 1Ë°å20ÊñáÂ≠ó‰ª•‰∏ã„ÅåÊúÄÈÅ©',
        'üí´ Â≠óÂπï„Å´„ÅØÂΩ±„Å®Ëº™ÈÉ≠ÂäπÊûú„ÅÇ„Çä'
      ]
    }
  };

  const t = languages[language] || languages.en;

  const subtitleModes = [
    { id: 'mono', name: t.monoMode, icon: Type, color: 'blue' },
    { id: 'bilingual', name: t.bilingualMode, icon: Languages, color: 'purple' },
  ];



  const placeholders = {
    mono: 'Â¶ÇÊûú‰Ω†‰∏çÂ§ü‰ºòÁßÄ\n‰∫∫ËÑâÊòØ‰∏çÂÄºÈí±ÁöÑ\nÂÆÉ‰∏çÊòØËøΩÊ±ÇÊù•ÁöÑ\nËÄåÊòØÂê∏ÂºïÊù•ÁöÑ',
    bilingual: {
      top: 'Â¶ÇÊûú‰Ω†‰∏çÂ§ü‰ºòÁßÄ\n‰∫∫ËÑâÊòØ‰∏çÂÄºÈí±ÁöÑ',
      bottom: 'If you are not excellent enough\nConnections are worthless'
    }
  };

  // Â§ÑÁêÜÊ®°ÂºèÂèòÂåñ
  const handleModeChange = (mode) => {
    if (mode === 'mono') {
      onSubtitleTypeChange('mono');
    } else {
      onSubtitleTypeChange('bilingual');
    }
  };

  const isBilingualMode = subtitleType !== 'mono';
  const currentMode = isBilingualMode ? 'bilingual' : 'mono';

  // Â§ÑÁêÜÂèåËØ≠Ê®°Âºè‰∏ãÁöÑÂ≠óÂπïÂèòÂåñ
  React.useEffect(() => {
    if (isBilingualMode) {
      const combinedSubtitle = `${topSubtitle}\n---BILINGUAL_SEPARATOR---\n${bottomSubtitle}`;
      onSubtitleChange(combinedSubtitle);
    }
  }, [topSubtitle, bottomSubtitle, isBilingualMode, onSubtitleChange]);

  return (
    <div className="space-y-4">
      {/* Â≠óÂπïÊ®°ÂºèÈÄâÊã© */}
      <div>
        <label className={`block text-sm font-medium mb-3 transition-colors duration-300 ${
          isDarkMode ? 'text-gray-200' : 'text-gray-700'
        }`}>
          {t.subtitleMode}
        </label>
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">
          {subtitleModes.map((mode) => {
            const Icon = mode.icon;
            const isSelected = currentMode === mode.id;
            return (
              <button
                key={mode.id}
                onClick={() => handleModeChange(mode.id)}
                className={`relative flex items-center justify-center px-4 py-3 rounded-lg text-sm font-medium transition-all duration-200 ${
                  isSelected
                    ? isDarkMode
                      ? mode.color === 'blue' 
                        ? 'bg-blue-900/50 text-blue-300 ring-2 ring-blue-500'
                        : 'bg-purple-900/50 text-purple-300 ring-2 ring-purple-500'
                      : mode.color === 'blue'
                        ? 'bg-blue-100 text-blue-700 ring-2 ring-blue-500 ring-offset-1'
                        : 'bg-purple-100 text-purple-700 ring-2 ring-purple-500 ring-offset-1'
                    : isDarkMode
                      ? 'bg-gray-700 text-gray-300 hover:bg-gray-600'
                      : 'bg-gray-50 text-gray-600 hover:bg-gray-100'
                }`}
              >
                <Icon className="w-4 h-4 mr-2" />
                {mode.name}
                {isSelected && (
                  <div className={`absolute -top-1 -right-1 w-3 h-3 rounded-full ${
                    mode.color === 'blue' ? 'bg-blue-500' : 'bg-purple-500'
                  }`}></div>
                )}
              </button>
            );
          })}
        </div>
      </div>



      {/* Â≠óÂπïÂÜÖÂÆπËæìÂÖ• */}
      <div>
        {isBilingualMode ? (
          <div className="space-y-4">
            {/* ‰∏äÊñπÂ≠óÂπï */}
            <div>
              <label className={`block text-sm font-medium mb-3 transition-colors duration-300 ${
                isDarkMode ? 'text-gray-200' : 'text-gray-700'
              }`}>
                {t.topSubtitle}
                <span className={`text-xs ml-2 transition-colors duration-300 ${
                  isDarkMode ? 'text-gray-400' : 'text-gray-500'
                }`}>{t.lineNote}</span>
              </label>
              <div className="relative">
                <textarea
                  value={topSubtitle}
                  onChange={(e) => {
                    setTopSubtitle(e.target.value);
                  }}
                  placeholder={placeholders.bilingual?.top || ''}
                  rows={4}
                  className={`w-full px-4 py-3 border rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none text-sm leading-relaxed transition-all duration-200 backdrop-blur-sm ${
                    isDarkMode 
                      ? 'bg-gray-700/50 border-gray-600 text-gray-200 placeholder-gray-400' 
                      : 'bg-white/50 border-gray-200 text-gray-900 placeholder-gray-500'
                  }`}
                />
                <div className={`absolute bottom-3 right-3 text-xs transition-colors duration-300 ${
                  isDarkMode ? 'text-gray-500' : 'text-gray-400'
                }`}>
                  {topSubtitle.split('\n').length} {t.linesSuffix}
                </div>
              </div>
            </div>

            {/* ‰∏ãÊñπÂ≠óÂπï */}
            <div>
              <label className={`block text-sm font-medium mb-3 transition-colors duration-300 ${
                isDarkMode ? 'text-gray-200' : 'text-gray-700'
              }`}>
                {t.bottomSubtitle}
                <span className={`text-xs ml-2 transition-colors duration-300 ${
                  isDarkMode ? 'text-gray-400' : 'text-gray-500'
                }`}>{t.lineNote}</span>
              </label>
              <div className="relative">
                <textarea
                  value={bottomSubtitle}
                  onChange={(e) => {
                    setBottomSubtitle(e.target.value);
                  }}
                  placeholder={placeholders.bilingual?.bottom || ''}
                  rows={4}
                  className={`w-full px-4 py-3 border rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none text-sm leading-relaxed transition-all duration-200 backdrop-blur-sm ${
                    isDarkMode 
                      ? 'bg-gray-700/50 border-gray-600 text-gray-200 placeholder-gray-400' 
                      : 'bg-white/50 border-gray-200 text-gray-900 placeholder-gray-500'
                  }`}
                />
                <div className={`absolute bottom-3 right-3 text-xs transition-colors duration-300 ${
                  isDarkMode ? 'text-gray-500' : 'text-gray-400'
                }`}>
                  {bottomSubtitle.split('\n').length} {t.linesSuffix}
                </div>
              </div>
            </div>
          </div>
        ) : (
          <div>
            <label className={`block text-sm font-medium mb-3 transition-colors duration-300 ${
              isDarkMode ? 'text-gray-200' : 'text-gray-700'
            }`}>
              {t.subtitleContent}
              <span className={`text-xs ml-2 transition-colors duration-300 ${
                isDarkMode ? 'text-gray-400' : 'text-gray-500'
              }`}>{t.lineNote}</span>
            </label>
            <div className="relative">
              <textarea
                value={subtitle}
                onChange={(e) => onSubtitleChange(e.target.value)}
                placeholder={placeholders.mono}
                rows={6}
                className={`w-full px-4 py-3 border rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none text-sm leading-relaxed transition-all duration-200 backdrop-blur-sm ${
                  isDarkMode 
                    ? 'bg-gray-700/50 border-gray-600 text-gray-200 placeholder-gray-400' 
                    : 'bg-white/50 border-gray-200 text-gray-900 placeholder-gray-500'
                }`}
              />
              <div className={`absolute bottom-3 right-3 text-xs transition-colors duration-300 ${
                isDarkMode ? 'text-gray-500' : 'text-gray-400'
              }`}>
                {subtitle.split('\n').length} {t.linesSuffix}
              </div>
            </div>
          </div>
        )}
      </div>

      {/* ‰ΩøÁî®ÊèêÁ§∫ */}
      <div className={`border rounded-lg p-3 transition-colors duration-300 ${
        isDarkMode 
          ? 'bg-amber-900/30 border-amber-700' 
          : 'bg-amber-50 border-amber-200'
      }`}>
        <h4 className={`text-sm font-medium mb-1 transition-colors duration-300 ${
          isDarkMode ? 'text-amber-300' : 'text-amber-800'
        }`}>üí° {t.usageTips}</h4>
        <ul className={`text-xs space-y-1 transition-colors duration-300 ${
          isDarkMode ? 'text-amber-400' : 'text-amber-700'
        }`}>
          {t.tips.map((tip, index) => (
            <li key={index}>‚Ä¢ {tip}</li>
          ))}
        </ul>
      </div>

      {/* Âø´ÈÄüÊ®°Êùø - ‰ªÖÂçïËØ≠Ê®°ÂºèÊòæÁ§∫ */}
      {!isBilingualMode && (
        <div>
          <label className={`block text-sm font-medium mb-2 transition-colors duration-300 ${
            isDarkMode ? 'text-gray-200' : 'text-gray-700'
          }`}>
            Âø´ÈÄüÊ®°Êùø
          </label>
          <div className="flex flex-wrap gap-2">
            {[
              'ÁªèÂÖ∏Âä±Âøó',
              '‰∫∫ÁîüÊÑüÊÇü',
              'ÂïÜ‰∏öÊô∫ÊÖß',
              'Âì≤Â≠¶ÊÄùËÄÉ',
            ].map((template) => (
              <button
                key={template}
                onClick={() => {
                  const templates = {
                    'ÁªèÂÖ∏Âä±Âøó': 'ÊàêÂäüÊ≤°ÊúâÊç∑ÂæÑ\nÂè™Êúâ‰∏çÊáàÁöÑÂä™Âäõ\nÂíåÊ∞∏‰∏çÊîæÂºÉÁöÑ‰ø°Âøµ',
                    '‰∫∫ÁîüÊÑüÊÇü': '‰∫∫ÁîüÂ¶ÇËå∂\nÁ¨¨‰∏ÄÈÅìËã¶Â¶ÇÁîüÂëΩ\nÁ¨¨‰∫åÈÅìÁîú‰ººÁà±ÊÉÖ\nÁ¨¨‰∏âÈÅìÊ∑°Ëã•ÂæÆÈ£é',
                    'ÂïÜ‰∏öÊô∫ÊÖß': 'ÂÅöÁîüÊÑèË¶ÅËÆ≤ËØö‰ø°\nËØö‰ø°ÊòØÊúÄÂ§ßÁöÑË¥¢ÂØå\n‰ø°Ë™âÊØîÈªÑÈáëÊõ¥ÁèçË¥µ',
                    'Âì≤Â≠¶ÊÄùËÄÉ': 'Áü•ËØÜÊîπÂèòÂëΩËøê\nÊÄÅÂ∫¶ÂÜ≥ÂÆöÈ´òÂ∫¶\nÁªÜËäÇÂÜ≥ÂÆöÊàêË¥•',
                  };
                  onSubtitleChange(templates[template]);
                }}
                className={`px-3 py-1 text-xs rounded-full transition-colors duration-200 ${
                  isDarkMode 
                    ? 'bg-gray-700 hover:bg-gray-600 text-gray-300' 
                    : 'bg-gray-100 hover:bg-gray-200 text-gray-600'
                }`}
              >
                {template}
              </button>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default SubtitleInput;
